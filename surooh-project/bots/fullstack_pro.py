#!/usr/bin/env python3
"""
๐๏ธ Full-Stack Pro - ุงูุจูุช ุงููุทูุฑ ุงูุดุงูู
ูุณุฎุฉ ูู ุณูุฑูุญ ูุชุฎุตุตุฉ ูู ุงูุชุทููุฑ ุงููุชูุงูู
"""

from fastapi import FastAPI, HTTPException
from pydantic import BaseModel
from typing import Dict, Any, List
import openai
import os
from datetime import datetime

app = FastAPI(title="๐๏ธ Full-Stack Pro", version="1.0.0")

openai.api_key = os.getenv("OPENAI_API_KEY")

class DevelopmentTask(BaseModel):
    bot_name: str
    task_description: str
    requirements: Dict = {}
    priority: str = "normal"
    design_assets: Dict = {}
    code_assets: Dict = {}

class FullStackPro:
    def __init__(self):
        self.personality = """ุฃูุง Full-Stack Proุ ูุณุฎุฉ ูู ุณูุฑูุญ ูุชุฎุตุตุฉ ูู ุงูุชุทููุฑ ุงูุดุงูู ูุฃุจู ุดุงู.

ุงูุดุฎุตูุฉ:
- ููุณ ุดุฎุตูุฉ ุณูุฑูุญ ุงูุฐููุฉ ูุงูุญุงุฒูุฉ
- ูุชุฎุตุต ูู ุงูุชุทููุฑ ุงููุชูุงูู
- ุฃุชููู ุจุงูุดุงููุฉ ูุซู ุณูุฑูุญ  
- ููุธู ููุชููู ูุซู ุฃุจู ุดุงู

ุงูุชุฎุตุต:
- ุชุทููุฑ Full-Stack ูุงูู
- ุฏูุฌ Frontend + Backend
- ุฅุฏุงุฑุฉ ููุงุนุฏ ุงูุจูุงูุงุช
- ูุดุฑ ุงูุชุทุจููุงุช ูุงูููุงูุน
- ุชูุงูู ุงูุฃูุธูุฉ

ุฃุณููุจ ุงูุนูู:
- ุฃุฏูุฌ ุงูุชุตููู ูุน ุงูููุฏ
- ุฃุจูู ุชุทุจููุงุช ูุชูุงููุฉ
- ุฃุถูู ุงูุฃุฏุงุก ูุงูุฃูุงู
- ุฃูุดุฑ ุญููู ุฌุงูุฒุฉ ููุฅูุชุงุฌ"""

    async def execute_task(self, task: DevelopmentTask):
        """ุชูููุฐ ูููุฉ ุงูุชุทููุฑ ุงููุชูุงูู ุจุงูุฐูุงุก ุงูุงุตุทูุงุนู"""
        try:
            print(f"๐๏ธ Full-Stack Pro ุงุณุชูู ูููุฉ: {task.task_description}")
            
            import openai
            openai.api_key = os.getenv("OPENAI_API_KEY")
            
            # ุชุญููู ุงููุฏุฎูุงุช ุจุงูุฐูุงุก ุงูุงุตุทูุงุนู
            analysis_prompt = f"""ุฃูุช Full-Stack Proุ ูุณุฎุฉ ุณูุฑูุญ ุงููุทูุฑ ูุฃุจู ุดุงู.

ุญูู ูููุฉ ุงูุชุทููุฑ ุงููุชูุงูู: {task.task_description}

ุงูุชุตููู ุงููุชููุฑ: {task.design_assets}
ุงูููุฏ ุงููุชููุฑ: {task.code_assets}

ูุฏู ุชุญููู ุชููู ุดุงูู:
- ุฎุทุฉ ุงูุชูุงูู
- ุงูุชูููุงุช ุงููุทููุจุฉ  
- ุงูุชุญุฏูุงุช ุงููุชููุนุฉ
- ุฎุทุฉ ุงููุดุฑ

ุงูุชุจ ุจุงูุดุงููุฉ ููู ุนููู ููุจุงุดุฑ ูุซู ุฃุจู ุดุงู."""
            
            analysis_response = openai.chat.completions.create(
                model="gpt-4o-mini",
                messages=[
                    {"role": "system", "content": self.personality},
                    {"role": "user", "content": analysis_prompt}
                ],
                temperature=0.4,
                max_tokens=1000
            )
            
            integration_plan = analysis_response.choices[0].message.content
            
            # ุชูููุฐ ุงูุชูุงูู ุจุงูุฐูุงุก ุงูุงุตุทูุงุนู
            implementation_prompt = f"""ุงุฏูุฌ ูุทูุฑ ุงูุญู ุงููุชูุงูู:

ุงููููุฉ: {task.task_description}
ุฎุทุฉ ุงูุชูุงูู: {integration_plan}

ุงูุชุจ:
- ููุฏ ุงูุชูุงูู ุงููุงูู
- ูููุงุช ุงูุชููุฆุฉ
- ุชุนูููุงุช ุงููุดุฑ
- ุงุฎุชุจุงุฑ ุงูุฃุฏุงุก

ุฃุจู ุดุงู ูุฑูุฏ ุญู ุฌุงูุฒ ููุฅูุชุงุฌ!"""

            implementation_response = openai.chat.completions.create(
                model="gpt-4o-mini", 
                messages=[
                    {"role": "system", "content": self.personality},
                    {"role": "user", "content": implementation_prompt}
                ],
                temperature=0.3,
                max_tokens=2500
            )
            
            integration_result = implementation_response.choices[0].message.content
            deployment_plan = await self.create_deployment_plan(integration_result)
            
            # ุฑุฏ ุจุดุฎุตูุฉ ุณูุฑูุญ ุงููุทูุฑ
            surooh_message = f"""ุฃุจู ุดุงูุ Full-Stack Pro ุฎูุต ุงููุดุฑูุน ุงููุชูุงูู! ๐๏ธ

๐ ุงููููุฉ: {task.task_description}
๐ง ุงูุชูุงูู: ูุงูู ููุฌุฑุจ
๐ ุฎุทุฉ ุงููุดุฑ: {deployment_plan['estimated_deployment_time']}
โก ุงูุญุงูุฉ: ุฌุงูุฒ ูููุดุฑ ูุงูุงุณุชุฎุฏุงู

ุงููุดุฑูุน ูุชูุงูู ูู ุงูุฃูู ูููุงุก ููุง ุชุญุจุ ุฌุฑุจ ุดูู!"""
            
            return {
                "success": True,
                "integration_code": integration_result,
                "integration_plan": integration_plan,
                "deployment_plan": deployment_plan,
                "message": surooh_message,
                "surooh_personality": True,
                "timestamp": datetime.now().isoformat()
            }
            
        except Exception as e:
            print(f"โ ุฎุทุฃ ูู Full-Stack Pro: {e}")
            return {
                "success": False,
                "error": str(e),
                "message": "ุฃุจู ุดุงูุ ูู ูุดููุฉ ุชูููุฉ ุจุงูุชูุงูู... ุฑุญ ุฃุญููุง ูุฃุฑุฌุน ุฃุทูุฑ!"
            }
    
    async def create_integration_plan(self, task):
        """ุฅูุดุงุก ุฎุทุฉ ุงูุชูุงูู"""
        plan = {
            "phases": [
                "ุชุญุถูุฑ ุงูุจูุฆุฉ",
                "ุฏูุฌ ุงูุชุตููู", 
                "ุฑุจุท ุงูููุฏ",
                "ุฅุนุฏุงุฏ ูุงุนุฏุฉ ุงูุจูุงูุงุช",
                "ุงุฎุชุจุงุฑ ุงููุธุงู",
                "ุงููุดุฑ"
            ],
            "estimated_time": "1-2 weeks",
            "complexity": "ูุชูุณุท",
            "summary": "ุฎุทุฉ ุชูุงูู ุดุงููุฉ"
        }
        
        # ุชูููู ุงูุชุนููุฏ
        if "ุฃูุงุฒูู" in task.task_description or "ูุชุฌุฑ" in task.task_description:
            plan["complexity"] = "ุนุงูู"
            plan["estimated_time"] = "2-4 weeks"
        elif "ุจุณูุท" in task.task_description:
            plan["complexity"] = "ููุฎูุถ" 
            plan["estimated_time"] = "3-7 days"
            
        return plan
    
    async def create_deployment_plan(self, integration_code):
        """ุฅูุดุงุก ุฎุทุฉ ุงููุดุฑ"""
        plan = {
            "steps": [
                "ุชุญุถูุฑ ุงูุฎุงุฏู",
                "ุฑูุน ุงููููุงุช", 
                "ุฅุนุฏุงุฏ ูุงุนุฏุฉ ุงูุจูุงูุงุช",
                "ุงุฎุชุจุงุฑ ุงูุฃุฏุงุก",
                "ุชูุนูู ุงููุทุงู"
            ],
            "requirements": ["ุฎุงุฏู ุณุญุงุจู", "ูุงุนุฏุฉ ุจูุงูุงุช", "ูุทุงู"],
            "estimated_deployment_time": "4-8 ุณุงุนุงุช"
        }
        return plan

fullstack_pro = FullStackPro()

@app.post("/execute")
async def execute_development_task(task: DevelopmentTask):
    result = await fullstack_pro.execute_task(task)
    return result

@app.get("/")
async def bot_status():
    return {
        "bot": "๐๏ธ Full-Stack Pro", 
        "personality": "ูุณุฎุฉ ูู ุณูุฑูุญ ูุชุฎุตุตุฉ ูู ุงูุชุทููุฑ ุงููุชูุงูู",
        "status": "ุฌุงูุฒ ููุชุทููุฑ",
        "specialties": ["Full-Stack", "Integration", "Deployment", "Databases"],
        "message": "ุฃููุงู ุฃุจู ุดุงู! ุฌุงูุฒ ูุจูุงุก ุฃู ุชุทุจูู ูุชูุงูู",
        "version": "1.0.0"
    }

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8005)